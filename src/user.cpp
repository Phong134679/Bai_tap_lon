#include "../include/user.h"
#include "../include/file_utils.h"
#include "../include/ui.h"
#include <functional>
#include <sstream>
#include <ctime>
#include <iostream>
#include <fstream>
#include <vector>
#include "../sql/sqlite3.h"
using namespace std;

User::User(const string& uname, const string& pwd, bool isAuto) : username(uname), password(pwd) , isAutoGenerated(isAuto){}

string User::getUsername() const { return username; }
string User::getPassword() const { return password; }
bool User::IsAuto() { return isAutoGenerated; }

string hashPassword(const string& password) {
    hash<string> hasher;
    return to_string(hasher(password));
}
string AutoGenerated() {
	const string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    string password;
    srand(time(0)); // Kh?i t?o seed cho random
    for (int i = 0; i < 10; i++) {
        password += chars[rand() % chars.length()];
    }
    return password;
}
bool createDatabase(sqlite3*& db) {
    int exit = sqlite3_open("data/users.db", &db);
    if (exit) {
        std::cerr << "Error open DB: " << sqlite3_errmsg(db) << std::endl;
        return false;
    }

    std::string sql = "CREATE TABLE IF NOT EXISTS USERS("
    "ID INTEGER PRIMARY KEY AUTOINCREMENT, "
    "USERNAME TEXT NOT NULL UNIQUE, "
    "PASSWORD TEXT NOT NULL, "
    "IS_AUTO INTEGER NOT NULL);";

    char* errorMsg;
    exit = sqlite3_exec(db, sql.c_str(), 0, 0, &errorMsg);
    if (exit != SQLITE_OK) {
        std::cerr << "Error Create Table: " << errorMsg << std::endl;
        sqlite3_free(errorMsg);
        return false;
    }

    return true;
}
bool findUser(sqlite3* db, const string& username) {
    string sql = "SELECT 1 FROM USERS WHERE USERNAME = ? LIMIT 1;";
    sqlite3_stmt* stmt;
    
    if (sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, nullptr) != SQLITE_OK) {
        cerr << "Prepare failed (findUser): " << sqlite3_errmsg(db) << endl;
        return false;
    }

    sqlite3_bind_text(stmt, 1, username.c_str(), -1, SQLITE_STATIC);

    int rc = sqlite3_step(stmt);
    bool exists = (rc == SQLITE_ROW); // Có dòng nghĩa là user tồn tại

    sqlite3_finalize(stmt);
    return exists;
}
bool registerUser(sqlite3* db, const string& username, const string& password, bool isAuto) {
    if (username.find(" ") != string::npos || password.find(" ") != string::npos) {
        return false;
    }
    if (findUser(db, username)) {
        return false;
    }

    string hashed = hashPassword(password);
    string sql = "INSERT INTO USERS (USERNAME, PASSWORD, IS_AUTO) VALUES (?, ?, ?);";
    sqlite3_stmt* stmt;

    if (sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, nullptr) != SQLITE_OK) {
        cerr << "Prepare failed (registerUser): " << sqlite3_errmsg(db) << endl;
        return false;
    }

    sqlite3_bind_text(stmt, 1, username.c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 2, hashed.c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_int(stmt, 3, isAuto ? 1 : 0);

    bool success = sqlite3_step(stmt) == SQLITE_DONE;
    sqlite3_finalize(stmt);
    return success;
}
bool ChangePassword(sqlite3* db, const string& username, const string& newPassword) {
    if (newPassword.find(" ") != string::npos) {
        return false;
    }

    string newHashed = hashPassword(newPassword);
    string sql = "UPDATE USERS SET PASSWORD = ?, IS_AUTO = 0 WHERE USERNAME = ?;";
    sqlite3_stmt* stmt;

    if (sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, nullptr) != SQLITE_OK) {
        cerr << "Prepare failed (ChangePassword): " << sqlite3_errmsg(db) << endl;
        return false;
    }

    sqlite3_bind_text(stmt, 1, newHashed.c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 2, username.c_str(), -1, SQLITE_STATIC);

    bool success = sqlite3_step(stmt) == SQLITE_DONE;
    sqlite3_finalize(stmt);
    return success;
}

bool loginUser(sqlite3* db, const string& username, const string& password) {
    string hashed = hashPassword(password);
    string sql = "SELECT IS_AUTO FROM USERS WHERE USERNAME = ? AND PASSWORD = ?;";
    sqlite3_stmt* stmt;

    if (sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, nullptr) != SQLITE_OK) {
        cerr << "Prepare failed (loginUser): " << sqlite3_errmsg(db) << endl;
        return false;
    }

    sqlite3_bind_text(stmt, 1, username.c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 2, hashed.c_str(), -1, SQLITE_STATIC);

    int rc = sqlite3_step(stmt);
    if (rc == SQLITE_ROW) {
        int isAuto = sqlite3_column_int(stmt, 0);
        sqlite3_finalize(stmt);
        if (isAuto == 0) return true;

        // Bắt đổi mật khẩu nếu là auto-gen
        while (true) {
            string newPass = getInput("Please enter your new password: ");
            if (ChangePassword(db, username, newPass)) break;
            showMessage("Invalid input!\n");
        }
        return true;
    }
    sqlite3_finalize(stmt);
    return false;
}


