#include "../include/user.h"
#include <iostream>
#include <ctime>
#include <cstdlib>
#include <sstream>
#include <functional>
#include "../include/ui.h"

using namespace std;

User::User(const string& uname, const string& pwd, bool isAuto)
    : username(uname), password(pwd), isAutoGenerated(isAuto) {}

string User::getUsername() const { return username; }
string User::getPassword() const { return password; }
bool User::IsAuto() const { return isAutoGenerated; }

string User::hashPassword(const string& password) {
    hash<string> hasher;
    return to_string(hasher(password));
}

string User::AutoGenerated() {
    const string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    string password;
    srand(time(0));
    for (int i = 0; i < 10; ++i) {
        password += chars[rand() % chars.length()];
    }
    return password;
}

bool User::registerToDB(Database& db) {
    if (username.find(" ") != string::npos || password.find(" ") != string::npos)
        return false;

    if (db.userExists(username)) return false;

    string hashed = hashPassword(password);
    return db.insertUser(username, hashed, isAutoGenerated);
}

bool User::loginFromDB(Database& db, const string& uname, const string& pwd) {
    string hashed = hashPassword(pwd);
    int isAuto = -1;
    if (db.validateUser(uname, hashed, isAuto)) {
        if (isAuto == 0) return true;
        // Prompt for password change if auto-generated
        while (true) {
            string newPass = getInput("Please enter your new password: ");
            User user(uname, newPass, false);
            if (user.changePassword(db, newPass)) break;
            showMessage("Invalid input!\n");
        }
        return true;
    }
    return false;
}

bool User::changePassword(Database& db, const string& newPassword) {
    if (newPassword.find(" ") != string::npos) return false;
    string hashed = hashPassword(newPassword);
    return db.updatePassword(username, hashed);
}
